summary(mtcars$gear)
fit2 <- lm(mpg ~ am + cyl, data = mtcars)
anova(fit1, fit2)
fit2 <- lm(mpg ~ am + cyl, data = mtcars)
anova(fit1, fit2)
fit3 <- lm(mpg ~ am + cyl + hp, data = mtcars)
anova(fit2, fit3)
fit4 <- lm(mpg ~ am + cyl + hp + wt, data = mtcars)
anova(fit3, fit4)
fit2 <- lm(mpg ~ factor(am) + cyl, data = mtcars)
anova(fit1, fit2)
fit1 <- lm(mpg ~ factor(am), data = mtcars)
summary(fit1)
str(mtcars)
data("mtcars")
data(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
fit1 <- lm(mpg ~ am, data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(am) + cyl, data = mtcars)
anova(fit1, fit2)
fit3 <- lm(mpg ~ am + cyl + hp, data = mtcars)
anova(fit2, fit3)
fit4 <- lm(mpg ~ am + cyl + hp + wt, data = mtcars)
anova(fit3, fit4)
fit5 <- lm(mpg ~ am + cyl + hp + wt + qsec, data = mtcars)
anova(fit4, fit5)
fit6 <- lm(mpg ~ am + cyl + hp + wt + vs, data = mtcars)
anova(fit4, fit6)
summary(fit4)
vif(fit4)
summary(fit4)
require(car)
vif(fit4)
install.packages("car")
summary(fit4)
require(car)
vif(fit4)
par(mfrow = c(2,2)); plot(fit4)
par(mfrow = c(2,2)); plot(fit4)
par(mfrow = c(2,2)); plot(fit4)
install.packages("leaflet")
install.packages("ggmap")
knitr::opts_chunk$set(echo = TRUE)
gc <- geocode('Hellbrunnerstraße 31, Salzburg')
library(ggmap)
gc <- geocode('Hellbrunnerstraße 31, Salzburg')
gc <- geocode('Salzburg')
View(gc)
map <- leaflet(gc) %>%
addTiles()
gc[1]
gc[2]
library(leaflet)
library(ggmap)
gc <- geocode('Salzburg')
df <- data.frame(name = 'Salzburg', lat = gc[2],
lng = gc[1])
map <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(gc,
icon = list(iconURL = 'https://de.wikipedia.org/wiki/Universit%C3%A4t_Salzburg#/media/File:Universit%C3%A4t_Salzburg_-_Logo.svg'), popup = 'University of Salzburg')
str(gc)
a <- as.numeric(gc)
library(leaflet)
library(ggmap)
gc <- geocode('Salzburg')
df <- data.frame(name = 'Salzburg', lat = gc[2],
lng = gc[1])
map <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(as.numeric(gc),
icon = list(iconURL = 'https://de.wikipedia.org/wiki/Universit%C3%A4t_Salzburg#/media/File:Universit%C3%A4t_Salzburg_-_Logo.svg'), popup = 'University of Salzburg')
map
?makeIcon
knitr::opts_chunk$set(echo = FALSE)
icon <- makeIcon(iconURL = 'https://academicpositions.at/uploads/2011/10/SalzburgLogo.png', iconWidth = 18, iconHeight = 6)
icon <- makeIcon(iconURL ='https://academicpositions.at/uploads/2011/10/SalzburgLogo.png', iconWidth = 18, iconHeight = 6)
icon <- awesomeIcons(icon = "angellist", library = "fa", markerColor = "lightgreen", spin = TRUE)
as.numeric(gc)[1]
library(leaflet)
library(ggmap)
gc <- geocode('Salzburg')
df <- data.frame(name = 'Salzburg', lat = gc[2],
lng = gc[1])
icon <- awesomeIcons(icon = "angellist", library = "fa", markerColor = "lightgreen", spin = TRUE)
map <- df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(as.numeric(gc)[1], as.numeric(gc)[2], icon = icon, label = 'University of Salzburg')
map
library(leaflet)
library(ggmap)
gc <- geocode('Salzburg')
df <- data.frame(name = 'Salzburg', lat = gc[2],
lng = gc[1])
icon <- awesomeIcons(icon = "angellist", library = "fa", markerColor = "lightgreen", spin = TRUE)
map <- df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = as.numeric(gc)[1], lat = as.numeric(gc)[2], icon = icon, label = 'University of Salzburg')
map
gc <- geocode('Hellbrunner Str. 34, 5020 Salzburg')
library(leaflet)
library(ggmap)
gc <- geocode('Hellbrunner Str. 34, 5020 Salzburg')
df <- data.frame(name = 'Salzburg', lat = gc[2],
lng = gc[1])
icon <- awesomeIcons(icon = "angellist", library = "fa", markerColor = "lightgreen", spin = TRUE)
map <- df %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = as.numeric(gc)[1], lat = as.numeric(gc)[2], icon = icon, label = 'University of Salzburg')
map
?mean
?show
?predict
?colSums
?url
test <- url('https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip')
install.packages("plotly")
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
m <- matrix(rnorm(100*100, mean = 0, sd = 5) +
rnorm(100*100, mean = 50, SD = 10),
nrow = 100, ncol = 100)
m <- matrix(rnorm(100*100, mean = 0, sd = 5) +
rnorm(100*100, mean = 50, sd = 10),
nrow = 100, ncol = 100)
plot_ly(z = m, type = "heatmap")
plot_ly(z = m, type = "surface")
m <- matrix(rnorm(100*100, mean = 0, sd = 5) +
rnorm(100*100, mean = 50, sd = 10),
nrow = 100, ncol = 100)
plot_ly(z = m, type = "surface")
```
m <- matrix(sort(rnorm(100*100, mean = 50, sd = 10),
nrow = 100, ncol = 100))
m <- matrix(sort(rnorm(100*100, mean = 50, sd = 10)),
nrow = 100, ncol = 100)
plot_ly(z = m, type = "surface")
m <- matrix(sort(rnorm(100*100, mean = 10, sd = 70)),
nrow = 100, ncol = 100)
plot_ly(z = m, type = "surface")
?plot_ly
data <- data("economics")
data <- data(economics)
head(economics)
?economics
economics
data("economics")
economics
data
time(economics)
data <- as.ts(economics)
time(data)
data <- economics
tsp(economics) <- economics$date
tsp(economics) <- format(economics$date, "%Y")
as.numeric(economics$data)
as.numeric(economics$date)
format(data$date, "%Y")
tsp(economics) <- as.numeric(format(data$date, "%Y"))
test <- as.numeric(format(data$date, "%Y"))
tsp(economics) <- test
data$date <- as.ts(as.numeric(format(data$date, "%Y")))
data$date
?as.ts
testdata <- as.ts(data)
testdata
temp <- as.ts(as.numeric(format(data$date, "%Y")))
tempd <- as.ts(as.numeric(format(data$date, "%Y")))
temp <- as.numeric(format(data$date, "%Y"))
temp <- as.integer(format(data$date, "%Y"))
data <- economics
temp <- as.numeric(format(data$date, "%Y"))
data$date <- as.ts(temp, start = min(temp), end = max(temp))
data
data$date
data(airmiles)
airmiles
time(airmiles)
plot_ly(x = time(airmiles), y = airmiles)
data("EuStockMarkets")
EuStockMarkets
stocks <- as.data.frame(EuStockMarkets)
EuStockMarkets[,1]
head(EuStockMarkets[,1])
format(EuStockMarkets[,1], "%Y")
data <- gather(EuStockMarkets, index, price)
library(dplyr)
data <- gather(EuStockMarkets, index, price)
library(tidyr)
data <- gather(EuStockMarkets, index, price)
data <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plotly(data, x = time, y = price, color = index)
plot_ly(data, x = time, y = price, color = index)
head(data)
data("EuStockMarkets")
data <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(data, x = time, y = price, color = index)
plot_ly(data, x = time, y = data$price, color = index)
plot_ly(data, x = data$time, y = data$price, color = data$index)
economy <- as.data.frame(economics)
economy$data <- as.numeric(format(economy$date, "%Y"))
economy$date <- as.numeric(format(economy$date, "%Y"))
data("economics")
economy <- as.data.frame(economics)
economy$date <- as.numeric(format(economy$date, "%Y"))
?economics
quantile(economy$pop)
?quantile
quantile(economy$pop, probs = c(0.25, 0.5, 0.75))
?as.factor
cut(economy$pop, quantile(economy$pop, probs = c(0.25, 0.5, 0.75)))
test <- cut(economy$pop, quantile(economy$pop, probs = c(0.25, 0.5, 0.75)))
level(test)
levels(test)
test <- cut(economy$pop, quantile(economy$pop, probs = seq(0,1,0.25)))
test
?levels
plot_ly(economy, x = date, y = unemploy, color = pop)
plot_ly(economy, x = economy$date, y = economy$unemploy, color = economy$pop)
rnorm(100) %>% hist()
library(magrittr)
rnorm(100) %>% hist()
rnorm(100) %>% hist(.)
# Create plot4
dev.new(width = 3, height = 9)
par(mfrow = c(2,2), mar = c(5,4,4,2))
# Topleft
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Global_active_power),
ylab = "Global Active Power (kilowatts)", type = "l")
# TopRight
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Voltage),
ylab = "Voltage",
xlab = "datetime", type = "l")
# BottomLeft
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>% {
plot(., as.numeric(data$Sub_metering_1),
ylab = "Energy sub metering", type = "n")
lines(., as.numeric(data$Sub_metering_1))
lines(., as.numeric(data$Sub_metering_2), col = "red")
lines(., as.numeric(data$Sub_metering_3), col = "blue")#
}
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"), bty = "n",
lty=1, cex = 0.8, xjust = 1, seg.len = 0.5)
# BottomRight
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Global_reactive_power),
ylab = "Global_reactive_power",
xlab = "datetime", type = "l")
library(magrittr)
# Read in Data only for dates between 01/02/2007 and 02/02/2007
lower_date <- as.Date("2007-01-31")
upper_date <- as.Date("2007-02-3")
data <- read.csv2("household_power_consumption.txt",
stringsAsFactors = F) %>%
subset(as.Date(Date, "%d/%m/%Y") < format(upper_date, "%Y-%m-%d") &
as.Date(Date, "%d/%m/%Y") > format(lower_date, "%Y-%m-%d"))
# Create plot4
dev.new(width = 3, height = 9)
par(mfrow = c(2,2), mar = c(5,4,4,2))
# Topleft
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Global_active_power),
ylab = "Global Active Power (kilowatts)", type = "l")
# TopRight
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Voltage),
ylab = "Voltage",
xlab = "datetime", type = "l")
# BottomLeft
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>% {
plot(., as.numeric(data$Sub_metering_1),
ylab = "Energy sub metering", type = "n")
lines(., as.numeric(data$Sub_metering_1))
lines(., as.numeric(data$Sub_metering_2), col = "red")
lines(., as.numeric(data$Sub_metering_3), col = "blue")#
}
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"), bty = "n",
lty=1, cex = 0.8, xjust = 1, seg.len = 0.5)
# BottomRight
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Global_reactive_power),
ylab = "Global_reactive_power",
xlab = "datetime", type = "l")
library(magrittr)
# Read in Data only for dates between 01/02/2007 and 02/02/2007
lower_date <- as.Date("2007-01-31")
upper_date <- as.Date("2007-02-3")
data <- read.csv2("household_power_consumption.txt",
stringsAsFactors = F) %>%
subset(as.Date(Date, "%d/%m/%Y") < format(upper_date, "%Y-%m-%d") &
as.Date(Date, "%d/%m/%Y") > format(lower_date, "%Y-%m-%d"))
# Create plot4
par(mfrow = c(2,2), mar = c(5,4,4,2))
# Topleft
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Global_active_power),
ylab = "Global Active Power (kilowatts)", type = "l")
# TopRight
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Voltage),
ylab = "Voltage",
xlab = "datetime", type = "l")
# BottomLeft
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>% {
plot(., as.numeric(data$Sub_metering_1),
ylab = "Energy sub metering", type = "n")
lines(., as.numeric(data$Sub_metering_1))
lines(., as.numeric(data$Sub_metering_2), col = "red")
lines(., as.numeric(data$Sub_metering_3), col = "blue")#
}
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"), bty = "n",
lty=1, cex = 0.8, xjust = 1, seg.len = 0.5)
# BottomRight
as.POSIXct(paste(as.Date(data$Date, "%d/%m/%Y"), data$Time)) %>%
plot(., as.numeric(data$Global_reactive_power),
ylab = "Global_reactive_power",
xlab = "datetime", type = "l")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
swirl()
swirl::install_course("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
abline(h = .5, col = "lightblue")
5
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
?mt
mt
plot(demnt)
plot(denmt)
distmt
cmat
points(cx, cy, co = c("red", "orange", "purple", pch = 3, cex = 2, lwd = 2))
points(cx, cy, co = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min())
apply(distTmp, 2, which.min
)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = ("black", "red", "green"), pch = 3, cex = 3, lwd =3)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd =3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R"")
myedit("addPatt.R")
myedit("addPatt.R")
source(addPatt.R, local = T)
source("addPatt.R", local = T)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1 <- svd(dataMatrix)
svd1$v[,1]
svd$d
svd1$d
head(constantMatrix)
svd2$d
svd2$d[,1:2]
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u %*% t(svd1$v) *svd1$d[1]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) *svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% diag(svd1$d[1:2])
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% diag(svd1$d[1:2])
diag(svd1$d[1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2]) #at the command prompt.
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])) #at the command prompt.
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10])) #at the command prompt.
install.packages("brainR")
install.packages("shiny")
library(shiny)
library(brain$)
library(brainR)
setwd('E:/Data_Science_Specialization_Coursera/Code/DataProducts/Week4')
template <- readNIfTI(system.file("single_subj_T1.nii", package = "brainR"), reorient = FALSE)
getwd()
?readNIfTI
url <- "http://nifti.nimh.nih.gov/nifti-1/data/filtered_func_data.nii.gz"
urlfile <- file.path(system.file("nifti", package="oro.nifti"),
"filtered_func_data")
download.file(url, urlfile, quiet=TRUE)
urlfile
template <- readNIfTI(system.file(urlfile, package = "brainR"), reorient = FALSE)
template <- readNIfTI(system.file("MNI152_T1_8mm_brain.nii.gz", package="brainR")
, reorient=FALSE)
brain <- contour3d(template, level = 4500, alpha = 0.8, draw = FALSE)
imgs <- paste("Visit_", 1:5, ".nii.gz", sep="")
files <- sapply(imgs, system.file, package="brainR")
scene <- list(brain)
nimgs <- length(imgs) # get number of images
cols <- rainbow(nimgs) # set colors
for (iimg in 1:nimgs) {
mask <- readNIfTI(files[iimg], reorient=FALSE)[,,,1] # read image mask
### use 0.99 for level of mask - binary
activation <- contour3d(mask, level = c(0.99),
alpha = 1, add = TRUE, color=cols[iimg], draw=FALSE)
## add these triangles to the list
scene <- c(scene, list(activation))
}
plot(scene)
plot(brain)
contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE
)
dtemp <- dim(template)
contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE)
?contour3d
drawScene.rgl(brain)
drawScene.rgl(scene)
drawScene.rgl(activation)
drawScene.rgl(brain, activation)
drawScene.rgl(mask)
?write4D
?renderRglwidget
?rglwidgetOutput
runApp('BrainR')
runApp('BrainR')
runApp('BrainR')
runApp('BrainR')
runApp('BrainR')
runApp('BrainR')
runApp('BrainR')
template <- readNIfTI(system.file("MNI152_T1_8mm_brain.nii.gz", package="brainR")
, reorient=TRUE)
dtemp <- dim(template)
brain <- contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE)
runApp('BrainR')
runApp('BrainR')
runApp('BrainR')
drawScene.rgl(brain)
drawScene.rgl(brain)
?drawScene.rgl
runApp('BrainR')
runApp('BrainR')
drawScene(brain)
drawScene.rgl(brain)
runApp('BrainR')
?readNIfTI
runApp('BrainR')
